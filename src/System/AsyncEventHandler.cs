namespace System
{
    /// <summary>
    /// Represents the method that will handle an asynchronous event.
    /// </summary>
    /// <param name="sender">The source of the event.</param>
    /// <param name="e">An <see cref="EventArgs"/> object that contains the event data.</param>
    /// <param name="cancellationToken">A cancellation token that can be used to cancel the asynchronous operation.</param>
    /// <returns>A task that represents the handling of the event.</returns>
    [Serializable]
    public delegate ValueTask AsyncEventHandler(object? sender, EventArgs e, CancellationToken cancellationToken = default);

    /// <summary>
    /// Represents the method that will handle an asynchronous event with event data of type <typeparamref name="TEventArgs"/>.
    /// </summary>
    /// <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
    /// <param name="sender">The source of the event.</param>
    /// <param name="e">An object of type <typeparamref name="TEventArgs"/> that contains the event data.</param>
    /// <param name="cancellationToken">A cancellation token that can be used to cancel the asynchronous operation.</param>
    /// <returns>A task that represents the handling of the event.</returns>
    [Serializable]
    public delegate ValueTask AsyncEventHandler<TEventArgs>(object? sender, TEventArgs e, CancellationToken cancellationToken = default);

    /// <summary>
    /// Provides extension methods for invoking asynchronous event handlers.
    /// </summary>
    public static class AsyncEventHandlerExtensions
    {
        /// <summary>
        /// Invokes the specified asynchronous event handler.
        /// </summary>
        /// <param name="eventHandler">The event handler to invoke.</param>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">An <see cref="EventArgs"/> object that contains the event data.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the asynchronous operation.</param>
        /// <param name="continueOnCapturedContext">Whether to marshal the continuation back to the original context captured.</param>
        /// <returns>A task that represents the invocation of the event handler.</returns>
        /// <exception cref="OperationCanceledException">The operation was canceled.</exception>
        /// <exception cref="AggregateException">One or more exceptions occurred during the invocation of the event handler.</exception>
        public static async ValueTask InvokeAsync(this AsyncEventHandler? eventHandler, object? sender, EventArgs e, CancellationToken cancellationToken = default, bool continueOnCapturedContext = default)
        {
            if (eventHandler is null) return;

            var individualHandlers = eventHandler.GetInvocationList();
            List<Exception>? exceptions = null;
            foreach (var @delegate in individualHandlers)
            {
                cancellationToken.ThrowIfCancellationRequested();
                var handler = (AsyncEventHandler)@delegate;
                try
                {
                    await handler(sender, e, cancellationToken).ConfigureAwait(continueOnCapturedContext: continueOnCapturedContext);
                }
                catch (OperationCanceledException) when (cancellationToken.IsCancellationRequested)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    exceptions ??= new List<Exception>();
                    exceptions.Add(ex);
                }
            }

            if (exceptions is not null)
            {
                throw new AggregateException(exceptions);
            }
        }

        /// <summary>
        /// Invokes the specified asynchronous event handler with event data of type <typeparamref name="TEventArgs"/>.
        /// </summary>
        /// <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
        /// <param name="eventHandler">The event handler to invoke.</param>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">An object of type <typeparamref name="TEventArgs"/> that contains the event data.</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel the asynchronous operation.</param>
        /// <param name="continueOnCapturedContext">Whether to marshal the continuation back to the original context captured.</param>
        /// <returns>A task that represents the invocation of the event handler.</returns>
        /// <exception cref="OperationCanceledException">The operation was canceled.</exception>
        /// <exception cref="AggregateException">One or more exceptions occurred during the invocation of the event handler.</exception>
        public static async ValueTask InvokeAsync<TEventArgs>(this AsyncEventHandler<TEventArgs>? eventHandler, object? sender, TEventArgs e, CancellationToken cancellationToken = default, bool continueOnCapturedContext = default)
        {
            if (eventHandler is null) return;

            var individualHandlers = eventHandler.GetInvocationList();
            List<Exception>? exceptions = null;
            foreach (var @delegate in individualHandlers)
            {
                cancellationToken.ThrowIfCancellationRequested();
                var handler = (AsyncEventHandler<TEventArgs>)@delegate;
                try
                {
                    await handler(sender, e, cancellationToken).ConfigureAwait(continueOnCapturedContext: continueOnCapturedContext);
                }
                catch (OperationCanceledException) when (cancellationToken.IsCancellationRequested)
                {
                    throw;
                }
                catch (Exception ex)
                {
                    exceptions ??= new List<Exception>();
                    exceptions.Add(ex);
                }
            }

            if (exceptions is not null)
            {
                throw new AggregateException(exceptions);
            }
        }

    }
}
